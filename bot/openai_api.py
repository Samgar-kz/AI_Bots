import aiohttp
import redis
import os
from config import OPENAI_API_KEY
from logger import logger

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
redis_client = redis.Redis(host="redis", port=6379, db=0, decode_responses=True)

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–º)
banned_words = ["–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", "–ø–æ–ª–∏—Ç–∏–∫–∞", "18+", "—Å–ø–∞–º"]

async def ask_openai(user_id, user_question, source="Telegram", available_functions=None):
    if available_functions is None:
        available_functions = ["–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"]

    try:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if any(word in user_question.lower() for word in banned_words):
            return "üö´ –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π."

        # –ö–ª—é—á –≤ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history_key = f"history:{user_id}"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        history = redis_client.lrange(history_key, -10, -1)
        history_messages = [{"role": "user" if i % 2 == 0 else "assistant", "content": msg} for i, msg in enumerate(history)]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_messages.append({"role": "user", "content": user_question})

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
        system_prompt = """
        –¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≤–µ—Å—Ç–∏ –≤–µ–∂–ª–∏–≤—É—é –±–µ—Å–µ–¥—É.
        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ü–µ–Ω—É ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –≤ –º–∞–≥–∞–∑–∏–Ω.
        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞.
        """
        history_messages.insert(0, {"role": "system", "content": system_prompt})

        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI (GPT-3.5 –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö, GPT-4-Turbo –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        if len(user_question) > 50 or "–æ–±—ä—è—Å–Ω–∏" in user_question.lower():
            model = "gpt-4-turbo"
        else:
            model = "gpt-3.5-turbo"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.openai.com/v1/chat/completions",
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"},
                json={"model": model, "messages": history_messages}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    bot_response = data["choices"][0]["message"]["content"]
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {response.status} {await response.text()}")
                    return "‚ùå –û—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
        redis_client.rpush(history_key, user_question, bot_response)
        redis_client.ltrim(history_key, -10, -1)

        return bot_response

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."