from aiogram import types
from aiogram.filters import Command
from google_sheets import get_product_info, get_faq_answer, log_query
from openai_api import ask_openai
from logger import logger

# –•—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–æ—Ç –ø–æ–º–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
sessions = {}

async def start_command(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    greeting = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!"

    await message.answer(greeting, parse_mode="Markdown")

async def help_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞"""
    help_text = """
    ü§ñ *AI –ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç* ‚Äì –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
    
    ‚úÖ –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
    ‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    ‚úÖ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º
    
    üîπ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç! 
    """
    await message.answer(help_text, parse_mode="Markdown")

async def reset_session(message: types.Message):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    if user_id in sessions:
        del sessions[user_id]  # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")

async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.voice or message.video_note or message.audio or message.video:
        await message.answer("üö´ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    user_id = message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    user_text = message.text.strip().lower()

    try:
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Google Sheets
        product_info, photo_url = get_product_info(user_text)
        if product_info:
            if photo_url:
                await message.answer_photo(photo_url, caption=product_info)
            else:
                await message.answer(product_info)
            log_query(user_text, product_info)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            return

        # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ Google Sheets (FAQ)
        faq_answer = get_faq_answer(user_text)
        if faq_answer:
            await message.answer(faq_answer)
            log_query(user_text, faq_answer)
            return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI (—Å –∏—Å—Ç–æ—Ä–∏–µ–π)
        response = await ask_openai(user_id, user_text, source="Telegram")
        await message.answer(response)
        log_query(user_text, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")